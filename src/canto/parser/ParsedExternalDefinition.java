/* Canto Compiler and Runtime Engine
 * 
 * ParsedExternalDefinition.java
 *
 * Copyright (c) 2018 by cantolang.org
 * All rights reserved.
 */

package canto.parser;

import canto.lang.*;

/**
 * Based on code generated by jjtree.
 *
 * @author Michael St. Hippolyte
 * @version $Revision: 1.10 $
 */
public class ParsedExternalDefinition extends ExternalDefinition implements Scoped {

    public ParsedExternalDefinition(int id) {
        super();
    }

    /** Accept the visitor. **/
    public Object jjtAccept(CantoParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void init() {
        int len = children.length;
        if (len > 0) {
            Type type = DefaultType.TYPE;
            NameNode nameNode;
            AbstractNode node = children[0];
            if (node instanceof Type) {
                type = (Type) node;
                nameNode = (NameNode) children[1];
            } else {
                nameNode = (NameNode) node;
            }

            AbstractNode contents = null;
            ComplexName name;
            if (nameNode instanceof ComplexName) {
                name = (ComplexName) nameNode;
            } else {
                name = new ComplexName(nameNode);
            }
            int access = getAccess();
            int dur = getDurability();
            ExternalDefinition protoDef = createPrototype(name, type, access, dur);
            if (protoDef != null) {
                setExternalClass(protoDef.getExternalClass());
                setObject(protoDef.getObject());
                setArguments(protoDef.getArguments());
                contents = protoDef;
            }
            init(type, name, contents);
        }
    }

    public void setModifiers(int access, int dur) {
        setAccess(access);
        setDurability(dur);
    }

    public NameNode getDefName() {
        return getNameNode();
    }
}
