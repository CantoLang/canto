/* Canto Compiler and Runtime Engine
 * 
 * ParsedExternalCollectionDefinition.java
 *
 * Copyright (c) 2018 by cantolang.org
 * All rights reserved.
 */

package canto.parser;

import java.util.*;

import canto.lang.*;

/**
 * Based on code generated by jjtree.
 *
 * @author Michael St. Hippolyte
 * @version $Revision: 1.4 $
 */
public class ParsedExternalCollectionDefinition extends ExternalDefinition implements Scoped {

    public ParsedExternalCollectionDefinition(int id) {
        super();
    }

    /** Accept the visitor. **/
    public Object jjtAccept(CantoParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void init() {
        int len = children.length;
        if (len > 0) {
            AbstractNode node = children[0];
            int elementIx;
            NameNode nameNode = null;
            Type type = null;
            List<Dim> dims = null;
            if (node instanceof Type) {
                type = (Type) node;
                elementIx = 1;
            } else {
                elementIx = 0;
            }
            nameNode = (NameNode) children[elementIx++];

            // initialize the dimensions
            if (elementIx < len && children[elementIx] instanceof Dim) {
                dims = new ArrayList<Dim>(len - elementIx);
                while (elementIx < len) {
                    dims.add((Dim) children[elementIx++]);
                    if (!(children[elementIx] instanceof Dim)) {
                        break;
                    }
                 }
            } else {
                dims = nameNode.getDims();
            }

            List<Dim> typeDims = null;
            if (type != null) {
                typeDims = type.getDims();
            }
            if (dims == null || dims.size() == 0) {
                if (typeDims == null || typeDims.size() == 0) {
                    return;
                } else {
                    dims = typeDims;
                }
            } else if (typeDims != null) {
                List<Dim> newDims = new ArrayList<Dim>(dims.size() + typeDims.size());
                newDims.addAll(typeDims);
                newDims.addAll(dims);
                dims = newDims;
            }

            // init needs the dims, so call setDims first
            setDims(dims);

            AbstractNode contents = null;
            ComplexName name;
            if (nameNode instanceof ComplexName) {
                name = (ComplexName) nameNode;
            } else {
                name = new ComplexName(nameNode);
            }
            int access = getAccess();
            int dur = getDurability();
            ExternalDefinition protoDef = ExternalDefinition.createPrototype(name, type, access, dur);
            if (protoDef != null) {
                setExternalClass(protoDef.getExternalClass());
                setObject(protoDef.getObject());
                setArguments(protoDef.getArguments());
                contents = protoDef.getContents();
            }
            init(type, name, contents);
        }
    }

    public void setModifiers(int access, int dur) {
        setAccess(access);
        setDurability(dur);
    }

    public NameNode getDefName() {
        return getNameNode();
    }
}
