/* Canto Compiler and Runtime Engine
 * 
 * ParsedIntegerLiteral.java
 *
 * Copyright (c) 2018 by cantolang.org
 * All rights reserved.
 */

package canto.parser;

import canto.lang.*;

/**
 * Based on code generated by jjtree.
 *
 * @author Michael St. Hippolyte
 * @version $Revision: 1.5 $
 */
public class ParsedIntegerLiteral extends PrimitiveValue {
    public ParsedIntegerLiteral(int id) {
        super(null, Integer.class);
    }

    public void setValue(String val) {
        int len = (val == null ? 0 : val.length());
        char lastChar = (len > 0 ? val.charAt(len - 1) : 0);
        String hexStr = null;
        if (len > 2 && (val.startsWith("0x") || val.startsWith("0X"))) {
            hexStr = val.substring(2);
        } else if (len > 1 && val.charAt(0) == '#') {
            hexStr = val.substring(1);
        }
        if (lastChar == 'l' || lastChar == 'L') {
            try {
                if (hexStr == null) {
                    setValueAndClass(Long.valueOf(val), Long.TYPE);
                } else {
                    setValueAndClass(Long.valueOf(hexStr, 16), Long.TYPE);
                }
            } catch (NumberFormatException nfe) {
                log("Invalid number format: " + val);
                setValueAndClass(new Long(0L), Long.TYPE);
            }
        } else {
            try {
                if (hexStr == null) {
                    setValueAndClass(Integer.valueOf(val), Integer.TYPE);
                } else {
                    setValueAndClass(Integer.valueOf(hexStr, 16), Integer.TYPE);
                }
            } catch (NumberFormatException nfe) {
                log("Invalid number format: " + val);
                setValueAndClass(new Integer(0), Integer.TYPE);
            }
        }
    }


    /** Accept the visitor. **/
    public Object jjtAccept(CantoParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
